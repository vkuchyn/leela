{
  "name": "ngstorage",
  "version": "0.3.6",
  "author": {
    "name": "Gias Kay Lee"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/gsklee/ngStorage/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gsklee/ngStorage"
  },
  "main": "ngStorage.js",
  "scripts": {
    "test": "./node_modules/.bin/grunt test"
  },
  "devDependencies": {
    "bower": "^1.x",
    "grunt": "^0.4.1",
    "grunt-cli": "^0.1.11",
    "grunt-contrib-uglify": "^0.x",
    "grunt-karma": "^0.x",
    "karma": "^0.12.31",
    "karma-chrome-launcher": "^0.1.4",
    "karma-firefox-launcher": "^0.1.3",
    "karma-mocha": "^0.1.0",
    "karma-phantomjs-launcher": "^0.1.4",
    "mocha": "^2.2.4"
  },
  "dependencies": {},
  "readme": "ngStorage\n=========\n\n<!--\n[![Build Status](https://travis-ci.org/gsklee/ngStorage.svg)](https://travis-ci.org/gsklee/ngStorage)\n-->\n\n[![Dependency Status](https://david-dm.org/gsklee/ngStorage.svg)](https://david-dm.org/gsklee/ngStorage)\n[![devDependency Status](https://david-dm.org/gsklee/ngStorage/dev-status.svg)](https://david-dm.org/gsklee/ngStorage#info=devDependencies)\n\nAn [AngularJS](https://github.com/angular/angular.js) module that makes Web Storage working in the *Angular Way*. Contains two services: `$localStorage` and `$sessionStorage`.\n\n### Differences with Other Implementations\n\n* **No Getter 'n' Setter Bullshit** - Right from AngularJS homepage: \"Unlike other frameworks, there is no need to [...] wrap the model in accessors methods. Just plain old JavaScript here.\" Now you can enjoy the same benefit while achieving data persistence with Web Storage.\n\n* **sessionStorage** - We got this often-overlooked buddy covered.\n\n* **Cleanly-Authored Code** - Written in the *Angular Way*, well-structured with testability in mind.\n\n* **No Cookie Fallback** - With Web Storage being [readily available](http://caniuse.com/namevalue-storage) in [all the browsers AngularJS officially supports](http://docs.angularjs.org/misc/faq#canidownloadthesourcebuildandhosttheangularjsenvironmentlocally), such fallback is largely redundant.\n\nInstall\n=======\n\n### Bower\n\n```bash\nbower install ngstorage\n```\n\n*NOTE:* We are `ngstorage` and *NOT* `ngStorage`. The casing is important!\n\n### NPM\n```bash\nnpm install ngstorage\n```\n\n*NOTE:* We are `ngstorage` and *NOT* `ngStorage`. The casing is important!\n\nCDN\n===\n\ncdnjs now hosts ngStorage at <https://cdnjs.com/libraries/ngStorage>\n\nTo use it\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/ngStorage/0.3.5/ngStorage.min.js\"></script>\n```\n\nUsage\n=====\n\n### Require ngStorage and Inject the Services\n\n```javascript\nangular.module('app', [\n    'ngStorage'\n]).controller('Ctrl', function(\n    $scope,\n    $localStorage,\n    $sessionStorage\n){});\n```\n\n### Read and Write | [Demo](http://plnkr.co/edit/3vfRkvG7R9DgQxtWbGHz?p=preview)\n\nPass `$localStorage` (or `$sessionStorage`) by reference to a hook under `$scope` in plain ol' JavaScript:\n\n```javascript\n$scope.$storage = $localStorage;\n```\n\nAnd use it like you-already-know:\n\n```html\n<body ng-controller=\"Ctrl\">\n    <button ng-click=\"$storage.counter = $storage.counter + 1\">{{$storage.counter}}</button>\n</body>\n```\n\n> Optionally, specify default values using the `$default()` method:\n>\n> ```javascript\n> $scope.$storage = $localStorage.$default({\n>     counter: 42\n> });\n> ```\n\nWith this setup, changes will be automatically sync'd between `$scope.$storage`, `$localStorage`, and localStorage - even across different browser tabs!\n\n### Read and Write Alternative (Not Recommended) | [Demo](http://plnkr.co/edit/9ZmkzRkYzS3iZkG8J5IK?p=preview)\n\nIf you're not fond of the presence of `$scope.$storage`, you can always use watchers:\n\n```javascript\n$scope.counter = $localStorage.counter || 42;\n\n$scope.$watch('counter', function() {\n    $localStorage.counter = $scope.counter;\n});\n\n$scope.$watch(function() {\n    return angular.toJson($localStorage);\n}, function() {\n    $scope.counter = $localStorage.counter;\n});\n```\n\nThis, however, is not the way ngStorage is designed to be used with. As can be easily seen by comparing the demos, this approach is way more verbose, and may have potential performance implications as the values being watched quickly grow.\n\n### Delete | [Demo](http://plnkr.co/edit/o4w3VGqmp8opfrWzvsJy?p=preview)\n\nPlain ol' JavaScript again, what else could you better expect?\n\n```javascript\n// Both will do\ndelete $scope.$storage.counter;\ndelete $localStorage.counter;\n```\n\nThis will delete the corresponding entry inside the Web Storage.\n\n### Delete Everything | [Demo](http://plnkr.co/edit/YiG28KTFdkeFXskolZqs?p=preview)\n\nIf you wish to clear the Storage in one go, use the `$reset()` method:\n\n```javascript\n$localStorage.$reset();\n````\n\n> Optionally, pass in an object you'd like the Storage to reset to:\n>\n> ```javascript\n> $localStorage.$reset({\n>     counter: 42\n> });\n> ```\n\n### Permitted Values | [Demo](http://plnkr.co/edit/n0acYLdhk3AeZmPOGY9Z?p=preview)\n\nYou can store anything except those [not supported by JSON](http://www.json.org/js.html):\n\n* `Infinity`, `NaN` - Will be replaced with `null`.\n* `undefined`, Function - Will be removed.\n\n### Minification\nJust run `$ npm install` to install dependencies.  Then run `$ grunt` for minification.\n\nTodos\n=====\n\n* ngdoc Documentation\n* Namespace Support\n* Unit Tests\n* Grunt Tasks\n\nAny contribution will be appreciated.\n",
  "readmeFilename": "README.md",
  "description": "ngStorage =========",
  "bugs": {
    "url": "https://github.com/gsklee/ngStorage/issues"
  },
  "homepage": "https://github.com/gsklee/ngStorage",
  "_id": "ngstorage@0.3.6",
  "dist": {
    "shasum": "74266bb52000b75c26fa8d48574cfd7a451db275"
  },
  "_from": "ngstorage@",
  "_resolved": "https://registry.npmjs.org/ngstorage/-/ngstorage-0.3.6.tgz"
}
